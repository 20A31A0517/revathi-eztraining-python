#Construction of binary tree:
class BinaryTreeNode:
    def __init__(self,data):
        self.data=data
        self.leftChild=None
        self.rightChild=None
node1=BinaryTreeNode(10)
node2=BinaryTreeNode(22)
node3=BinaryTreeNode(45)
node4=BinaryTreeNode(50)
node5=BinaryTreeNode(30)
node6=BinaryTreeNode(78)
node7=BinaryTreeNode(15)

node1.leftChild=node2
node1.rightChild=node3
node2.leftChild=node4
node2.rightChild=node5
node3.leftChild=node6
node3.rightChild=node7

print("Root node is : ",node1.data)
print("Left child of the root node is : ",node1.leftChild.data)
print("Right child of the root node is : ",node1.rightChild.data)
print("Node is : ",node2.data)
print("Left child of the node is : ",node2.leftChild.data)
print("Right child of the node is : ",node2.rightChild.data)
print("Node is : ",node3.data)
print("Left child of the node is : ",node3.leftChild.data)
print("Right child of the node is : ",node3.rightChild.data)
Output:
Root node is :  10
Left child of the root node is :  22
Right child of the root node is :  45
Node is :  22
Left child of the node is :  50
Right child of the node is :  30
Node is :  45
Left child of the node is :  78
Right child of the node is :  15

#Binary tree traversal(preorder,inorder,postorder)
class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
def inorder(root):
    if root:
        inorder(root.left)
        print(root.data,end=" ")
        inorder(root.right)
def postorder(root):
    if root:
        postorder(root.left)
        postorder(root.right)
        print(root.data,end=" ")
def preorder(root):
    if root:
        print(root.data,end=" ")
        preorder(root.left)
        preorder(root.right)
root=Node(1)
root.left=Node(2)
root.right=Node(3)
root.left.left=Node(4)
root.left.right=Node(5)
print("Preorder:")
preorder(root)
print("\nInorder:")
inorder(root)
print("\nPostorder:")
postorder(root)
Output:
Preorder:
1 2 4 5 3 
Inorder:
4 2 5 1 3 
Postorder:
4 5 2 3 1 

#Binary search tree with inorder
class Node:
    def __init__(self,key):
        self.val=key
        self.left=None
        self.right=None
def insert (root,key):
    if root is None:
        return Node(key)
    else:
        if root.val==key:
            return root
        elif root.val<key:
            root.right=insert(root.right,key)
        else:
            root.left=insert(root.left,key)
    return root
def inorder(root):
    if root:
        inorder(root.left)
        print(root.val,end=" ")
        inorder(root.right)
r=Node(50)
r=insert(r,30)
r=insert(r,40)
r=insert(r,20)
r=insert(r,60)
r=insert(r,70)
r=insert(r,80)
inorder(r)
Output:20 30 40 50 60 70 80 

#Deletion in BST 
class Node:
    def __init__(self,key):
        self.key=key
        self.left=None
        self.right=None
def insert (root,key):
    if root is None:
        return Node(key)
    else:
        if root.key==key:
            return root
        elif root.key<key:
            root.right=insert(root.right,key)
        else:
            root.left=insert(root.left,key)
    return root
def inorder(root):
    if root:
        inorder(root.left)
        print(root.key,end=" ")
        inorder(root.right)
def minValueNode(node):
    current=node
    while current.left is not None:
        current=current.left
    return current
def deleteNode(root,key):
    if root is None:
        return root
    if key<root.key:
        root.left=deleteNode(root.left,key)
    elif key>root.key:
        root.right=deleteNode(root.right,key)
    else:
        if root.left is None:
            temp=root.right
            root=None
            return temp
        elif root.right is None:
            temp=root.left
            root=None
            return temp
        temp=minValueNode(root.right)
        root.key=temp.key
        root.right=deleteNode(root.right,temp.key)
    return root
root=None
root=insert(root,50)
root=insert(root,30)
root=insert(root,40)
root=insert(root,20)
root=insert(root,60)
root=insert(root,70)
root=insert(root,80)
print("Inorder traversal of the given tree")
inorder(root)
print("\nDelete 20")
root=deleteNode(root,20)
print("Inorder traversal of the modified tree")
inorder(root)
print("\nDelete 30")
root=deleteNode(root,30)
print("Inorder traversal of the modified tree")
inorder(root)
print("\nDelete 50")
root=deleteNode(root,50)
root=deleteNode(root,30)
print("Inorder traversal of the modified tree")
inorder(root)
Output:
Inorder traversal of the given tree
20 30 40 50 60 70 80 
Delete 20
Inorder traversal of the modified tree
30 40 50 60 70 80 
Delete 30
Inorder traversal of the modified tree
40 50 60 70 80 
Delete 50
Inorder traversal of the modified tree
40 60 70 80 

