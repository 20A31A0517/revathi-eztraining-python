PROGRAMS ON LAMBDA FUNCTION:
#Anonymous function
L=[1,2,3]
r=map(lambda x:x+x,L)
print(list(r))
Output:[2, 4, 6]

#map-helps to create iteration it return map ob
res=map(lambda n:pow(n,2),L)
print(list(res))
Output:[1,4,9]

name='sam'
(lambda name:print(name))(name)
Output:sam

name='sam'
(lambda name:print(name))(name+name)
Output:samsam

x = lambda a, b: a * b
print(x(5, 6))
Output:30

def myfunc(n):
  return lambda a : a / n
mytripler = myfunc(3)
print(mytripler(12))
Output:4.0

#Write a program after creating a list with even numbers
#within the range 1 to 15 ,now apply lambda function and 
#create a new listwith square roots of the elements.
L1=[2,4,6,8,10,12,14]
res=map(lambda n:pow(n,1/2),L1)
print(list(res))
Output:[1.4142135623730951, 2.0, 2.449489742783178, 2.8284271247461903,
 3.1622776601683795, 3.4641016151377544, 3.7416573867739413]

PROGRAMS ON ABSTRACTION:

from abc import ABC,abstractmethod
class abstractdemo(ABC):
    @abstractmethod	 #called decorator to make the method(function) abstract one
    def display(self):
        None
    @abstractmethod 
    def show(self):
        None
class demo(abstractdemo):
    def display(self):
        print("Abstraction method")
    def show(self):
        print("2nd method")
obj=demo()
obj.display()
obj.show()
Output:
Abstraction method
2nd method

PROGRAMS ON INHERITENCE:
#Single inheritence
#one parent and one child class
class parent:
    def display(self):
        print("Parent class")
class child(parent):
    def show(self):
        print("Child class")
c=child()
c.display()
c.show()
Output:
Parent class
Child class
â€‹#taking elements from the parent class 
class A:
    n=30
class B(A):
    def cal(self):
        c=self.n+70
        print(c)
ob=B()
ob.cal()
Output:100

#Multiple inheritence
class dad:
    def ddisplay(self):
        print("Dad class")
class mom:
    def mdisplay(self):
        print("Mom class")
class child(dad,mom):
    def cdisplay(self):
        print("Child class")
c1=child()
c1.mdisplay()
c1.ddisplay()
c1.cdisplay()
Output:
Mom class
Dad class
Child class

#Multi level inheritence
class grandparent:
    def display(self):
        print("Grand parent class")
class parent(grandparent):
    def show(self):
        print("Parent class")
class child(parent):
    def printing(self):
        print("Child class")
c2=child()
c2.display()
c2.show()
c2.printing()
Output:
Grand parent class
Parent class
Child class

#hierarchical inheritence
class parent:
    def pdisplay(self):
        print("Parent class")
class child1(parent):
    def show1(self):
        print("Child1 class")
class child2(parent):
    def show2(self):
        print("Child2 class")
c1=child1()
c1.pdisplay()
c1.show1()
c2=child2()
c2.pdisplay()
c2.show2()
Output:
Parent class
Child1 class
Parent class
Child2 class

#hybrid inheritence
class parent:
    def pdisplay(self):
        print("Parent class")
class child1(parent):
    def show1(self):
        print("Child1 class")
class child2(parent):
    def show2(self):
        print("Child2 class")
class kid1(child1):
    def k1display(self):
        print("Kid1 class")
class kid2(child1):
    def k2display(self):
        print("Kid2 class")
class kidd1(child2):
    def k1show(self):
        print("Kidd1 class")
class kidd2(child2):
    def k2show(self):
        print("Kidd2 class")
c1=kid1()
c1.k1display()
c1.pdisplay()
c1.show1()
c2=kid2()
c2.k2display()
c2.pdisplay()
c2.show1()
c3=kidd1()
c3.k1show()
c3.show2()
c3.pdisplay()
c4=kidd2()
c4.k2show()
c4.show2()
c4.pdisplay()
Output:
Kid1 class
Parent class
Child1 class
Kid2 class
Parent class
Child1 class
Kidd1 class
Child2 class
Parent class
Kidd2 class
Child2 class
Parent class

HAPPY NUMBER PROGRAM:
#Happy number or not
def happyno(n):
    sum=0
    while n>0:   
        rem=n%10
        sum+=rem*rem
        n=n//10
    return sum
num=int(input("Enter a number:"))
result=num
while result!=1 and result!=4:
    result=happyno(result)
if result==1:
    print(num," is a happy number")
#in doing this process if number 4  or 145 occurs it will be repeated a lot times
elif result==4:
    print(num," is not a happy number")
Output:
Enter a number:13
13 is a happy number

PROGRAMS ON ENCAPSULATION:
#protected
class encap:
    _a=10
    c=20
    def encapfunction(self):
        _b=230
        print("Encap function accessing protected")
        print(self._a+10)
obj=encap()
obj.encapfunction()
print(obj._a)
print(obj.c)
Output:
Encap function accessing protected
20
10
20
10

#private
class encap:
    __a=10
    print(__a)
    def encapfunction(self):
        print("Encap function")
        print(self.__a)
obj=encap()
obj.encapfunction()
print(obj.__a)
Output:
Encap function
10
Traceback (most recent call last):
  File "C:/Users/LENOVO/Desktop/CRT/D-7/encapsulation.py", line 22, in <module>
    print(obj.__a)
AttributeError: 'encap' object has no attribute '__a'

PROGRAMS ON POLYMORPHISM:
#Method overloading
class metoverload:
    def display(self,a=None,b=None):
        print(a,b)
ob=metoverload()
ob.display()
ob.display(10,20)
ob.display(20)
Output:
None None
10 20
20 None

#Operator overloading
class operoverload:
    def display1(self,a,b):
        print(a+b)
ob=operoverload()
ob.display1(10,20)
ob.display1("2","0")
Output:
30
20

#Overriding
class vijaywada:
    def placename(self):
        print("KLU")
    def student(self):
        print("Yes-vijaywada")
    def year(self):
        print("3rd year")
class hyd:
    def placename(self):
        print("HYD-KLU")
    def student(self):
        print("Yes-hyd")
    def year(self):
        print("3rd year")
ob1,ob2=vijaywada(),hyd()
for details in (ob1,ob2):
    details.placename()
    details.student()
    details.year()
Output:
KLU
Yes-vijaywada
3rd year
HYD-KLU
Yes-hyd
3rd year
